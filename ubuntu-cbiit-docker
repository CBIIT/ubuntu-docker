#Setting your environment variable - This an example to set your environment to a sample Docker Hub repo - The userID here is your docker hub userID
#Make sure you already have your repo folder strucutre already setup in Docker Hub.
#registryCredential: This variable represents the credentials variable name that you created in Jenkins for accessing the Docker Hub Repo.
pipeline {
  environment {
    registry = "nrizk83/ubuntu-base-image"
    registryCredential = 'docker-hub'
    dockerImage = ''
  }
  agent any
  
  #Stage1: Clone the Repo from GitHub  
  stages {
    stage('Cloning Git') {
      steps {
        git 'https://github.com/CBIIT/ubuntu-docker.git'
      }
    }
    
    #Stage2: Build the docker image and assign a build number
    #Office365ConnectorSend: This is a MSTeams plugin that needs to be installed in Jenkins & your Teams Channel should be configured with a Webhook
    #Once configured, copy and paste the Webhook URL here.
    #Since Webhook URLs are not enabled at NCI, feel free to replace this part with an email notification from Jenkins.
    stage('Building image') {
      steps{
        script {
          dockerImage = docker.build registry + ":$BUILD_NUMBER"
        }
        office365ConnectorSend webhookUrl: 'https://outlook.office.com/webhook/6faa453a-84bf-4bfb-8a01-c0373d260d02@a5c2ab90-5b50-4606-9f1d-83c879f0a49f/IncomingWebhook/2bb9efbe59534841bc7f4ba1f8f787dd/4088b722-d5d7-4c04-b7af-4b2a5ea227cb',
            message: 'Docker Image has been built.',
            status: 'Success'
      }
    }
    
    #Stage3: Run the Docker image in docker environment
    #Jenkins must be configured to run Docker commands!
    stage('Run docker image') {
      steps{
        sh "docker run -id --name UbuntuBaseOS_20_0_4 $registry:$BUILD_NUMBER /bin/bash"
        office365ConnectorSend webhookUrl: 'https://outlook.office.com/webhook/6faa453a-84bf-4bfb-8a01-c0373d260d02@a5c2ab90-5b50-4606-9f1d-83c879f0a49f/IncomingWebhook/2bb9efbe59534841bc7f4ba1f8f787dd/4088b722-d5d7-4c04-b7af-4b2a5ea227cb',
            message: 'Docker Image has been Deployed and Running.',
            status: 'Success'  
      }
    }
    
    #Stage4: Push image to the sample docker hub registry 
    stage('Deploy Image') {
      steps{
        script {
          docker.withRegistry( '', registryCredential ) {
            dockerImage.push()
          }
        }
         office365ConnectorSend webhookUrl: 'https://outlook.office.com/webhook/6faa453a-84bf-4bfb-8a01-c0373d260d02@a5c2ab90-5b50-4606-9f1d-83c879f0a49f/IncomingWebhook/2bb9efbe59534841bc7f4ba1f8f787dd/4088b722-d5d7-4c04-b7af-4b2a5ea227cb',
            message: 'Docker Image has been pushed to the Docker Registry.',
            status: 'Success'
      }
    }
    
    #Stage5: Push Image to the CBIIT Nexus Docker Registry
    #It is not a best practice to pass on a username and password for docker login command - THIS WAS DONE FOR Proof of Concept purpses only! 
    #In order to parameterize this, create a similar credential vault lik the one above in Jenkins, define the variable on top, and pass it to this command here.
    stage('Deploy Image to CBIIT Docker Registry') {
      steps{
         sh "docker tag $registry:$BUILD_NUMBER ncidockerhub.nci.nih.gov/docker-linux-poc/ubuntu-base-image:5.0"
         sh "docker login -u RWLt5S8H -p eNUJejaAJtZ8wCY8eocGX3oi_KIBHvfyqF9c7aBHI-uO ncidockerhub.nci.nih.gov/docker-linux-poc"
         sh "docker push ncidockerhub.nci.nih.gov/docker-linux-poc/ubuntu-base-image:5.0"
         office365ConnectorSend webhookUrl: 'https://outlook.office.com/webhook/6faa453a-84bf-4bfb-8a01-c0373d260d02@a5c2ab90-5b50-4606-9f1d-83c879f0a49f/IncomingWebhook/2bb9efbe59534841bc7f4ba1f8f787dd/4088b722-d5d7-4c04-b7af-4b2a5ea227cb',
            message: 'Docker Image has been pushed to the [CBIIT Docker Registry.](https://ncidockerhub.nci.nih.gov/nexus/#browse/browse:docker-cbiit-private-hosted:v2%2Fdocker-linux-poc%2Fubuntu-base-image)',
            status: 'Success'
      }
    }
  }
}
